# Как работать со списками?

"""
list_1 = [] # Создание пустого списка
list_2 = list() # Создание пустого списка
list_3 = [7, 9, 11, 13, 15, 17]
print(* list_3)
"""

###############################################################

# Чтобы узнать количество элементов в списке необходимо использовать функцию len(имя_списка):
"""
list_1 = [7, 9, 11, 13, 15, 17]
print(len(list_1)) # 6

"""
###############################################################

# Можно список заполнять не только при его создании, но и во время работы программы:
"""
list_1 = list()     # создание пустого списка
for i in range(5):  # цикл выполнится 5 раз
    n = int(input())    # пользователь вводит целое число
    list_1.append(n)    # сохранение элемента в конец списка
# 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]

print(list_1) # [12, 7, -1, 21, 0]
print(list_1[-2])
"""

###############################################################

# Взаимодействие цикла for со списком:
"""
list_1 = [12, 7, -1, 21, 0]
for i in list_1:
    print(i) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): i = 12
# 2-я итерация цикла(повторение 2): i = 7
# 3-я итерация цикла(повторение 3): i = -1
# 4-я итерация цикла(повторение 4): i = 21
# 5-я итерация цикла(повторение 5): i = 0

list_1 = [12, 7, -1, 21, 0]
for i in range(len(list_1)):
    print(list_1[i]) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): list_1[0] = 12
# 2-я итерация цикла(повторение 2): list_1[1] = 7
# 3-я итерация цикла(повторение 3): list_1[2] = -1
# 4-я итерация цикла(повторение 4): list_1[3] = 21
# 5-я итерация цикла(повторение 5): list_1[4] = 0

list_1 = []
print(list_1)
for i in range(5):
    list_1.append(i)
    print(list_1)
"""
###############################################################

# Основные действия со списками:
# 1. Удаление последнего элемента списка.
# Метод "pop" удаляет последний элемент из списка:
'''
list_1 = [12, 7, -1, 21, 0]
print(list_1.pop())     # 0
print(list_1)           # [12, 7, -1, 21]
print(list_1.pop())     # 21
print(list_1)           # [12, 7, -1]
print(list_1.pop())     # -1
print(list_1)           # [12, 7]

# 2. Удаление конкретного элемента из списка.
    # Надо указать значение индекса в качестве аргумента функции pop:

list_1 = [12, 7, -1, 21, 0]
print(list_1.pop(1))    # 12
print(list_1)           # [7, -1, 21, 0]


# 3. Добавление элемента на нужную позицию.
    # Функция insert — указание индекса (позиции) и значения.

list_1 = [12, 7, -1, 21, 0]
print(list_1.insert(2, 22))
print(list_1)            # [12, 7, 11, -1, 21, 0]
'''
###############################################################

# Срез списка
# ● Отрицательное число в индексе — счёт с конца списка

'''
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[0])        # 1
print(list_1[1])        # 2
print(list_1[len(list_1)-1]) # 10
print(list_1[-5])        # 6
print(list_1[:])         # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[:2])        # [1, 2]
print(list_1[len(list_1)-2:]) #[9, 10]
print(list_1[2:9])       # [3, 4, 5, 6, 7, 8, 9]
print(list_1[6:-18])     # []
print(list_1[0:len(list_1):6]) # [1, 7]
print(list_1[::6])       # [1, 7]
'''

###############################################################

# Кортежи
'''
t = ()  # создание пустого кортежа
print(type(t))  # class <'tuple'>
t = (1,)
print(type(t))
t = (1)
print(type(t))
t = (28, 9, 1990)
print(type(t))
colors = ['red', 'green', 'blue']
print(colors)  # ['red', 'green', 'blue']
print(type(colors))

t = tuple(colors)
print(t)  # ('red', 'green', 'blue')
print(type(t))

t = tuple(['red', 'green', 'blue'])
print(t[0])  # red
print(t[2])  # blue
for e in t:
    print(e)  # red green blue

print()

for i in range(len(t)):
    print(t[i])

print()
# t[0] = 'black'  # TypeError: 'tuple' object does not support (нельзя изменять кортеж)


a, b, c = t
print(a, b, c)

print()

# Можно распаковать кортеж в независимые переменные:
t = tuple(['red', 'green', 'blue'])
red, green, blue = t
print('r:{} g:{} b:{}'.format(red, green, blue)) # r:red g:green b:blue
'''
###############################################################

# Словари:
'''
dictionary = {}
dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
print(dictionary)               # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
print(dictionary['left'])       # ←
                                # типы ключей могут отличаться
print(dictionary['up'])  # ↑
                                # типы ключей могут отличаться
dictionary['left'] = '⇐'
print(dictionary['left'])       # ⇐
#print(dictionary['type'])       # KeyError: 'type'
# del dictionary['left']          # удаление элемента
for item in dictionary:         # for (k,v) in dictionary.items():
    print('{}: {}'.format(item, dictionary[item]))
                                # up: ↑
                                # down: ↓
                                # right: →
print()
for (k, v) in dictionary.items():         # for (k,v) in dictionary.items():
    print(k, v)

print()
print(dictionary.items())
'''

###############################################################

# Множества:
'''
colors = {'red', 'green', 'blue'}
print(colors)           # {'red', 'green', 'blue'}
colors.add('red')
print(colors)           # {'red', 'green', 'blue'}
colors.add('gray')
print(colors)           # {'red', 'green', 'blue','gray'}
colors.remove('red')
print(colors)           # {'green', 'blue','gray'}
# colors.remove('red')    # KeyError: 'red'
colors.discard('red')   # ok
print(colors)           # {'green', 'blue','gray'}
colors.clear()          # { }
print(colors)           # set()

print()

q = set('red, green, blue') # создание множества
print(q)                # {'n', 'l', 'b', 'g', 'u', 'r', ',', 'd', 'e', ' '}
'''

###############################################################

# Операции со множествами в Python
'''
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy()                    # c = {1, 2, 3, 5, 8}
u = a.union(b)                  # u = {1, 2, 3, 5, 8, 13, 21}
i = a.intersection(b)           # i = {8, 2, 5}
dl = a.difference(b)            # dl = {1, 3}
dr = b.difference(a)            # dr = {13, 21}
q = a.union(b).difference(a.intersection(b))  # {1, 21, 3, 13}

print(c, u, i, dl, dr, q)
'''

# Неизменяемое или замороженное множество(frozenset) — множество,
# с которым не будут работать методы удаления и добавления.

'''
a = {1, 2, 3, 5, 8}
b = frozenset(a)
print(b)            # frozenset({1, 2, 3, 5, 8})
'''

###############################################################

# List Comprehension

# List comprehension — это упрощенный подход к созданию списка, который
# задействует цикл for, а также инструкции if-else для определения того, что в итоге
# окажется в финальном списке.

# 1. Простая ситуация — список:
# list_1 = [exp for item in iterable]

# 2. Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)]


# Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
#     print(list_1) # [1, 2, 3,..., 100]
#
# # Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]

# 2. Добавить условие (только чётные числа)
list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]
print(list_1)

# Допустим, вы решили создать пары каждому из чисел (кортежи)
list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),..., (100, 100)]
print(list_1)

# Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
list_1 = [i * 2 for i in range(10) if i % 2 == 0]
print(list_1) # [0, 4, 8, 12, 16]

###############################################################


###############################################################


###############################################################