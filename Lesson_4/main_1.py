# Анонимные, lambda-функции
##########################################################
# Какой тип данных у функции? → <class “function”>

# def f(x):
#     return x * x
#
#
# print(f(5))
# g = f
# print(type(f))
# print(type(g))
# print(g(5))
#
# # У функции есть тип, значит мы можем создать переменную типа функции и
# # положить в эту переменную какую-то другую функцию
#
# # Теперь в контексте этого приложения g может использоваться точно так же, как и f.
# # g — это переменная, которая хранит в себе ссылку на функцию.
#################################################################

# def calk1(a, b):
#     return a + b
#
#
# def calk2(a, b):
#     return a * b
#
#
# def math(op, x, y):
#     print(op(x, y))
#
#
# math(calk1, 5, 45)
# math(calk2, 5, 45)

#####################
def calk1(a, b):
    return a + b


def calk2(a, b):
    return a * b


def math(op, x, y):
    print(op(x, y))


# calk1 = lambda a, b: a + b
# math(calk1, 5, 45)

math(lambda a, b: a + b, 5, 45)
