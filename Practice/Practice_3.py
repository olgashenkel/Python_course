# ФУНКЦИИ

# # Локальные функции
# # Одни функции могут определяться внутри других функций - внутренние функции еще называют локальными.
# # Локальные функции можно использовать только внутри той функции, в которой они определены.
# # Например:
#
# def print_messages():
#     # определение локальных функций
#     def say_hello(): print("Hello")
#     def say_goodbye(): print("Good Bye")
#
#     # вызов локальных функций
#     say_hello()
#     say_goodbye()
#
#
# # Вызов функции print_messages
# print_messages()
#
# # say_hello() # вне функции print_messages функция say_hello не доступна


# ###################################################################################
# ###################################################################################


# Организация программы и функция main
# В программе может быть определено множество функций.
# И чтобы всех их упорядочить, одним из способов их организации является добавление специальной функции
# (обычно называется main), в которой потом уже вызываются другие функции:

# def main():
#     say_hello()
#     say_goodbye()
#
#
# def say_hello():
#     print("Hello")
#
#
# def say_goodbye():
#     print("Good Bye")
#
#
# # Вызов функции main
# main()

# ###################################################################################
# ###################################################################################

# Неопределенное количество параметров:

# С помощью символа звездочки можно определить параметр, через который
# можно передавать неопределенное количество значений.
# Это может быть полезно, когда мы хотим, чтобы функция получала несколько значений,
# но мы точно не знаем, сколько именно.
# Например, определим функцию подсчета суммы чисел:

# def sum(*numbers):
#     result = 0
#     for n in numbers:
#         result += n
#     print(f"sum = {result}")
#
#
# sum(1, 2, 3, 4, 5)  # sum = 15
# sum(3, 4, 5, 6)  # sum = 18
#
# # ###################################################################################
# # ###################################################################################
#
# # Каким будет результат следующей программы:
# def func(a, b):
#     return a + b
#
#
# print(func(2, 3, 4))

# Ответ: Программа завершится с ошибкой, так как функция func принимает 2 обязательных параметра,
# однако при вызове функции func ей передается 3 значения.


# ###################################################################################
# ###################################################################################

# Оператор return. Возвращение результата из функции

# ###################################################################################
# ###################################################################################

# def double(number):
#     return 2 * number
#
#
# result1 = double(4)
# print(f"result1 = {result1}")
#
# result1 = double(5)
# print(f"result1 = {result1}")


# def sum(a, b):
#     return a + b
#
#
# result = sum(4, 6)
# print(f"sum(4, 6) = {result}")
# print(f"sum(3, 5) = {sum(3, 5)}")

# ###################################################################################
# ###################################################################################


# Функция - как результат функции:


# ###################################################################################
# ###################################################################################

# def sum(a, b): return a + b
#
#
# def subtract(a, b): return a - b
#
#
# def multiply(a, b): return a * b
#
#
# def select_operation(choice):
#     if choice == 1:
#         return sum
#     elif choice == 2:
#         return subtract
#     else:
#         return multiply
#
#
# operation = select_operation(1)
# print(operation(10, 6))
#
# operation = select_operation(2)
# print(operation(10, 6))
#
# operation = select_operation(3)
# print(operation(10, 6))


# ###################################################################################
# ###################################################################################

# Лямбда-выражения (lambda):

# ###################################################################################
# ###################################################################################

# def select_operation(choice):
#     if choice == 1:
#         return lambda a, b: a + b
#     elif choice == 2:
#         return lambda a, b: a - b
#     else:
#         return lambda a, b: a * b
#
#
# operation = select_operation(1)
# print(operation(10, 6))
#
# operation = select_operation(2)
# print(operation(10, 6))
#
# operation = select_operation(3)
# print(operation(10, 6))

# ###################################################################################
# ###################################################################################

# Область видимости переменных:

# # Глобальный контекст:
# name = "Tom"
#
#
# def say_hi():
#     print("Hello", name)
#
#
# def say_bye():
#     print("Good bye", name)
#
#
# say_hi()
# say_bye()
#
#
# # Локальный контекст:
#
#
# def say_hi():
#     name = "Sam"
#     surname = "Johnson"
#     print("Hello", name, surname)
#
#
# def say_bye():
#     name = "Tom"
#     print("Good bye", name)
#
#
# say_hi()
# say_bye()

# Скрытие перемнных:
# name = "Tom"
#
#
# def say_hi():
#     name = "Bob"
#     print("Hello", name)
#
#
# def say_bye():
#     print("Good bye", name)
#
#
# say_hi()
# say_bye()
#
# # Изменение в локальной функции глобальной переменной с помощью global:
#
# name = "Tom"
#
#
# def say_hi():
#     global name
#     name = "Bob"
#     print("Hello", name)
#
#
# def say_bye():
#     print("Good bye", name)
#
#
# say_hi()
# say_bye()

# УПРАЖНЕНИЯ:
# Что выведет на консоль следующая программа:

# 1)
languagers = ["Java", "Python", "Javascript", "C++", "C#"]
for lang in languagers[:]:
    languagers.remove(lang)

print(languagers)

# 2)

try:
    letters = ["a", "b"]
    print(letters[2])
except (ValueError, IndexError):
    print("Произошла ошибка")



# 3)


numbers = [1, 2, 3, 4]
for idx, item in enumerate(numbers):
    del item
print(numbers)


